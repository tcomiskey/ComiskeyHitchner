Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
Tom Comiskey
Erin Hitchner
    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
Provides a list of the most commonly used git commands and what each one does. Also provides the options that can be used when using the git command.	

    ```

2.  What does `-ag` cause `git help` to do?

    ```
Provides all available git commands without descriptions and provides the common git guides


    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```
How up to date your machine's version is vs. the repository. What files are staged and what files are being tracked.


    ```

2.  What does `git add names.txt` do?

    ```
Tells git to begin tracking the file names.txt.


    ```

3.  What does `git commit -m "Add our names."` do?

    ```
Stages the changes we made to be pushed as well as writes the commit message "add our names".


    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
Adds all of the files that git does not know about. The . just accounts for any name and any file extension


    ```

5.  What does `git commit` (without -m) do?

    ```
Pulls up the vim editor to write in the commit message


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
git commit without the -m because it allows for multiline messages


    ```

7.  What does `git log do`?

    ```
git log tells you who, what, and when the commitments happened and displays the commit messages and id number. Does not show the file names or content of those files


    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
names.txt
Most recent version of file has been added but the changes have not yet been committed


    ```

    **Unstaged**

    ```
movies.txt
Changes have been made to file since last add or commmit call

    ```

    **Untracked**

    ```
foods.txt
Was never added so the repository does not know about this file

    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
names.txt will be committed


    ```

2.  What command do you run to stage changes?

    ```
git add <file>


    ```

3.  What command do you run to unstage changes?

    ```
git reset HEAD <file>


    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
Shows the unstaged changes in the file movies.txt


    ```

2.  What does `git diff --cached` display?

    ```
Shows the staged changes in the file names.txt


    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
git reset HEAD names.txt
git add movies.txt


    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
Now we have a copy of movies.txt that is staged to be committed and another copy with the changes that is unstaged. Git is attempting to save the original because it was already staged to be committed, but movies.txt is not untracked so it knows that we have altered the file.


    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
names.txt is listed as Deleted in the not staged list and is no longer in the directory. Git was already tracking it so it still knows that file existed


    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
Now movies.txt is listed as deleted in the not staged category and last-movies.txt is listed as untracked. Git is treating a renamed file as a new file.


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
git add .
git commit -m "Different movies, more food and no more names" . 


    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
It holds the most recently added version of a file to be committed.


    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
You might not be finished modifying some files and not want them to be committed yet so you only commit the files that were added to the stage and ready to be committed. 


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
Undid the most recent commit so movies.txt new name is not committed, foods.txt is not committed and names.txt being deleted is not committed.


    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
printed " Head is now at e3b301c Our Lab Progress"
git log showed the same things as --soft, but git status showed that there were no files staged to be committed and that my branch is up-to-date.


    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
--soft just uncommits the changes, while --hard goes back to before the changes were made. When ls called names.txt was still in directory and movies.txt was not renamed. 


    ```

3.  What do you think `HEAD` means?

    ```
Most recent commit

    ```

4.  What do you think `HEAD^` means?

    ```
Parent of most recent commit

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
